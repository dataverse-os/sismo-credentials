//SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

import "forge-std/Test.sol";
import {SismoCredential} from "../src/SismoCredential.sol";
import {BaseTest} from "./base/BaseTest.t.sol";
import {DataTypes} from "../src/libraries/DataTypes.sol";

contract SismoCredentialsTest is BaseTest {
    SismoCredential public sismoCredential;
    bytes response =
        hex"00000000000000000000000000000000000000000000000000000000000000201267ea070ec44221e85667a731eee04500000000000000000000000000000000b8e2054f8a912367e38a22ce773328ff000000000000000000000000000000007369736d6f2d636f6e6e6563742d76312e31000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000b5ab443dff53f0e397a9e0778a3343cbaf4d001a00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001a068796472612d73332e310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000004a0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011ced80673868b95a4e1e17b846881eedfd35ab926b3a90f6390a8af8027678e600000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002c00120debaf90e302583861b5f81200e0e04120ffc29738704d3e4339729a455fb26015aac5c5e059a755f6f8988172798553d22685e055c07252ffa3a6f9e9ff70d659630b588641e29cb1ae9478f1474c4427e0bfa6f25a6553ed6fd151dc6f414e9ee5778baa9dce98f3bc609ab7297143500bf891afb95f284b758bf438e94046d54d1c53cd415f604912dec3e50ef40f0f51bd489982c176658aa52dc41150b1f1e15edb2926f3778abc9c37372827591161acac216d25babddf3ee55911e0e9c32fa8c403fdd06de0cf640d9d8e4a79ac428c66f699a14c1afa4c2f1be2e0430d92fd1aeee7e3d25dd4a6229f7faec7200cd824da3e5b0738d4072914dd3000000000000000000000000000000000000000000000000000000000000000002b8a512b4aaebb2955485bc52ef1c2957ab167b3784a33ff5dff93ce2cc8e8b07f6c5612eb579788478789deccb06cf0eb168e457eea490af754922939ebdb920706798455f90ed993f8dac8075fc1538738a25f0c928da905c0dffd81869fa0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001ced80673868b95a4e1e17b846881eedfd35ab926b3a90f6390a8af8027678e617deb519a568cd1e54da8d268b86077d4e3d1cbe735d60461ac36a99654bca9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000c068796472612d73332e310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000004c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000f44c3e70f9147f1a4d59077451535f00000000000000000000000000000000006c617465737400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002c00b00686eb24d70c1beab294e3eaf5d76d44eaecb209bdb14c82a9b1b1d17af3e0d1cd71a5534e79f91eb94e6c99651456265823e99fdac1d92b1924685133c6f21e94e97895f99a47dacba3e58a96f8a244a663899518c41cb764e6d1e42f1c91c5cb78f5056e09c26f110e4651cb067826f7599193ef360e1adc978040e9d6505bc4c038e84ad3059eaeb2553b5f34895baa3ed7c90b69e9ac8cb635b2ebb1d1341af16ea4734e3c843d61c87088f45f02f5f3a6a56deee93e83545a11d2a2c0ed9c1284f3a66473051ebd5eba7aeea2c6cd53764f5610d25f9b1f9ff5d888b1effe109f93e5d49bbe2aa134a58ea6e41c93466671e220dec674cec205ce06a000000000000000000000000000000000000000000000000000000000000000002b8a512b4aaebb2955485bc52ef1c2957ab167b3784a33ff5dff93ce2cc8e8b07f6c5612eb579788478789deccb06cf0eb168e457eea490af754922939ebdb920706798455f90ed993f8dac8075fc1538738a25f0c928da905c0dffd81869fa015525b7872fd3c88f1837ccd17090a4631a00a8d60e8b39ef44fec5fce8bffa2b4d048d74ba4392342fcd8decf07742556ec7fae4eb17ff51e181f94fcfb48d143bf633750b17355486194a660c7cf29c7c05130a47fa78fde5cd2897e236f900000000000000000000000000000000000000000000000000000000000000010256b632931c5e49b3c7aae3c9cca52ea35deafb12d4cd29ac96341c4ffffffb00000000000000000000000000000000000000000000000000000000000000001ced80673868b95a4e1e17b846881eedfd35ab926b3a90f6390a8af8027678e617deb519a568cd1e54da8d268b86077d4e3d1cbe735d60461ac36a99654bca90000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    bytes response2 =
        hex"";

    // the appId from the Sismo Connect App we want to use
    bool isImpersonationMode = false; // <--- set to true to allow verifying proofs from impersonated accounts
    // sismo dataGroupIds
    bytes16 public constant TEAM_MEMBERS_GROUP_ID = 0xf44c3e70f9147f1a4d59077451535f00;
    bytes16 public constant G2M_GROUP_ID = 0x7cccd0183c6ca02e76600996a671a824;

    // bytes16 public constant DATA_GROUP_ID = 0x6d6ab4793a05fbdafbb8895f8e9eef14; // ten eths group

    // sismo appId
    bytes16 public constant APP_ID = 0x1267ea070ec44221e85667a731eee045;
    uint256 public constant DURATION = 7 days;

    address public owner = 0xb5AB443DfF53F0e397a9E0778A3343Cbaf4D001a;
    address public account = 0xb5AB443DfF53F0e397a9E0778A3343Cbaf4D001a;

    function setUp() public {
        _registerTreeRoot(0x04f0ace60fdf560415b93173156e67c6735946e9889973bfd56f1bcbe6fc5bcf);
        vm.startPrank(owner);
        DataTypes.GroupSetup[] memory groups = new DataTypes.GroupSetup[](2);
        groups[0] = (DataTypes.GroupSetup({groupId: TEAM_MEMBERS_GROUP_ID, startAt: 1000, duration: 1 days}));
        groups[1] = (DataTypes.GroupSetup({groupId: G2M_GROUP_ID, startAt: 12000, duration: 1 days}));

        sismoCredential = new SismoCredential(
            APP_ID,
            DURATION,
            isImpersonationMode,
            groups
        );
        vm.stopPrank();
    }

    function test_addDataGroups() public {
        bytes16 mockGroupId_01 = 0x7cccd0183c6ca02e76600996a6710001;
        bytes16 mockGroupId_02 = 0x7cccd0183c6ca02e76600996a6710002;

        DataTypes.GroupSetup[] memory groups = new DataTypes.GroupSetup[](2);
        groups[0] = (DataTypes.GroupSetup({groupId: mockGroupId_01, startAt: 1000, duration: 1 days}));

        groups[1] = (DataTypes.GroupSetup({groupId: mockGroupId_02, startAt: 12000, duration: 1 days}));

        vm.prank(owner);
        sismoCredential.addDataGroups(groups);

        assertEq(sismoCredential.getGroupIds()[2], mockGroupId_01);
        assertEq(sismoCredential.getGroupIds()[3], mockGroupId_02);
    }

    function test_deleteDataGroups() public {
        bytes16[] memory groupIds = new bytes16[](2);
        groupIds[0] = TEAM_MEMBERS_GROUP_ID;
        groupIds[1] = G2M_GROUP_ID;

        vm.prank(owner);
        sismoCredential.deleteDataGroups(groupIds);

        uint256 num = sismoCredential.getGroupIds().length;
        assertEq(num, 0);
    }

    function test_bindCredential() public {
        vm.prank(account);
        sismoCredential.bindCredential(account, response);

        DataTypes.CredentialInfo[] memory reps = sismoCredential.getCredentialInfoList(account);

        uint256 expiredAt = block.timestamp + 1 days - ((block.timestamp - 1000) % 1 days);
        assertEq(reps[0].groupId, TEAM_MEMBERS_GROUP_ID);
        assertEq(reps[0].value, true);
        assertEq(reps[0].expiredAt, expiredAt);

        assertEq(reps[1].groupId, G2M_GROUP_ID);
        assertEq(reps[1].value, false);
        assertEq(reps[1].expiredAt, 0);
    }

    function test_getCredential() public {
        vm.prank(account);
        sismoCredential.bindCredential(account, response);

        uint256 expiredAt = block.timestamp + 1 days - ((block.timestamp - 1000) % 1 days);

        vm.warp(block.timestamp + 100 days);
        DataTypes.CredentialInfo[] memory reps = sismoCredential.getCredentialInfoList(account);

        assertEq(reps[0].groupId, TEAM_MEMBERS_GROUP_ID);
        assertEq(reps[0].value, false);
        assertEq(reps[0].expiredAt, expiredAt);

        assertEq(reps[1].groupId, G2M_GROUP_ID);
        assertEq(reps[1].value, false);
        assertEq(reps[1].expiredAt, 0);
    }

    function test_getCredentialInfoList_should_not_return_deleted_credential() public {
        vm.prank(account);
        sismoCredential.bindCredential(account, response);
        uint256 expiredAt = block.timestamp + 1 days - ((block.timestamp - 1000) % 1 days);

        vm.warp(block.timestamp + 100 days);

        DataTypes.CredentialInfo[] memory reps = sismoCredential.getCredentialInfoList(account);

        assertEq(reps[0].groupId, TEAM_MEMBERS_GROUP_ID);
        assertEq(reps[0].value, false);
        assertEq(reps[0].expiredAt, expiredAt);

        assertEq(reps[1].groupId, G2M_GROUP_ID);
        assertEq(reps[1].value, false);
        assertEq(reps[1].expiredAt, 0);

        bytes16[] memory groupIds = new bytes16[](1);
        groupIds[0] = TEAM_MEMBERS_GROUP_ID;

        vm.prank(account);
        sismoCredential.deleteDataGroups(groupIds);
        reps = sismoCredential.getCredentialInfoList(account);
        assertEq(reps[0].groupId, G2M_GROUP_ID);
        assertEq(reps[0].value, false);
        assertEq(reps[0].expiredAt, 0);
    }

    function test_should_bind_new_account_after_refresh_duration() public {
        vm.prank(account);
        sismoCredential.bindCredential(account, response);

        DataTypes.CredentialInfo[] memory reps = sismoCredential.getCredentialInfoList(account);

        assertEq(reps[0].groupId, TEAM_MEMBERS_GROUP_ID);
        assertEq(reps[0].value, true);
        assertEq(reps[1].groupId, G2M_GROUP_ID);
        assertEq(reps[1].value, false);

        // before account refresh time , new account should not be bound,
        // but update previous account on reputation expired time
        vm.warp(block.timestamp + 6 days);
        address anotherAccount = 0x0E77cD675c56Ec561F4D5D29B96c7A282A2C9580;

        vm.prank(account);
        sismoCredential.bindCredential(anotherAccount, response2);

        reps = sismoCredential.getCredentialInfoList(anotherAccount);

        assertEq(reps[0].groupId, TEAM_MEMBERS_GROUP_ID);
        assertEq(reps[0].value, false);
        assertEq(reps[0].expiredAt, 0);

        assertEq(reps[1].groupId, G2M_GROUP_ID);
        assertEq(reps[1].value, false);
        assertEq(reps[1].expiredAt, 0);

        // after 7 days should bind to new account
        vm.warp(block.timestamp + 1 days);

        vm.prank(anotherAccount);
        sismoCredential.bindCredential(anotherAccount, response2);

        reps = sismoCredential.getCredentialInfoList(anotherAccount);

        assertEq(reps[0].groupId, TEAM_MEMBERS_GROUP_ID);
        assertEq(reps[0].value, true);

        assertEq(reps[1].groupId, G2M_GROUP_ID);
        assertEq(reps[1].value, true);

        reps = sismoCredential.getCredentialInfoList(account);
        assertEq(reps[0].groupId, TEAM_MEMBERS_GROUP_ID);
        assertEq(reps[0].value, false);
        assertEq(reps[0].expiredAt, 0);

        assertEq(reps[1].groupId, G2M_GROUP_ID);
        assertEq(reps[1].value, false);
        assertEq(reps[1].expiredAt, 0);
    }
}
